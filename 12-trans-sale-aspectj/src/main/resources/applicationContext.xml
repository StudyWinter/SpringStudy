<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--读取配置文件
        location：指定属性配置文件路径
        "classpath:":关键字表示类文件，也就是class文件所在的目录
    -->
    <context:property-placeholder location="classpath:jdbc.properties"/>



    <!--11、声明数据源DataSource   init和close是DruidDataSource类或者其父类中的方法-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--读取属性配置文件的key值，使用${key}-->
        <!--2、指定数据库的url-->
        <property name="url" value="${jdbc.url}"/> <!--setUrl()-->

        <!--3、用户名-->
        <property name="username" value="${jdbc.username}"/>  <!--setUsername()-->

        <!--4、密码-->
        <property name="password" value="${jdbc.password}"/>   <!--setPassword()-->
    </bean>

    <!--
        DruidDataSource myDataSource = new DruidDataSource();
        myDataSource.setUrl();
        myDataSource.setUsername();
        myDataSource.setPassword();
        myDataSource.init();


    -->
   

    <!--22、声明SqlSessionFactoryBean,创建SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--1、数据源-->
        <property name="dataSource" ref="myDataSource"/>

        <!--2、指定Mybatis的主配置文件-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>



    <!--33、声明Mybatis的扫描器，创建Dao接口的实现类对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--1、指定SqlSessionFactory对象，能够获取SqlSession-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

        <!--2、指定Dao接口的包名，框架会把这个包中的所有接口一次创建Dao对象-->
        <property name="basePackage" value="org.example.dao"/>

        <!--
            从spring中获取SqlSessionFactory,因为spring是一个容器（Map）
            SqlSessionFactory factory = map.get("sqlSessionFactory");
            SqlSession session = factory.openSession();

            for(接口：org.example.dao)
            {
                Dao 对象 = session.getMapper(接口);
                //把

            }

        -->

    </bean>

    <!--声明service-->
    <bean id="buyService" class="org.example.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>  <!--setGoodsDao()-->
        <property name="saleDao" ref="saleDao"/>

    </bean>


    <!--1、声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!--2、声明事务的通知
        指定业务方法的事务属性(传播行为、隔离级别、超时，回滚等)
    -->
    <tx:advice id="buyAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--给指定的业务方法设置事务属性
                name就是业务方法的名称，可以使用通配符(*:代表任意字符)
            -->
            <tx:method name="buyGoods" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException,org.example.excep.NotEnoughException"/>

            <!--设置addXXX方法的事务-->
            <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>

            <!--设置updateXXX方法放入事务-->
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>

            <!--其他方法的事务-->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>


        </tx:attributes>
    </tx:advice>


    <!--3、配置AOP-->
    <aop:config>
        <!--1、声明切入点表达式:指定一些类和方法要加入切面的功能-->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        
        <!--2、声明增强器对象(通知+切入点)
            advice-ref事务通知对象的id
            pointcut-ref：q切入点表达式
        -->
        <aop:advisor advice-ref="buyAdvice" pointcut-ref="servicePt"/>
    </aop:config>


</beans>